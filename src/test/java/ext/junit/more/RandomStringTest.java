/**
 * (c) Copyright 2019 Patrick McEvoy
 */
package ext.junit.more;

import static org.junit.Assert.assertEquals;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

/**
 * Tests for {@link RandomString}.
 * @author Patrick
 */
public class RandomStringTest {
    // The number of test cases to run
    private static final int NUM_TESTS = 100_000;

    // The random number distribution should be within 20% of an even distribution
    private static final float VARIANCE_FACTOR = 0.2f;

    // The system under test
    private final RandomString random = new RandomString();

    // A helper to count values generated by the RandomString generator
    private Counter counter;

    /**
     * Set up the counter.
     */
    @Before
    public void setUp() {
        counter = new Counter();
    }

    /**
     * Clear out the counter.
     */
    @After
    public void tearDown() {
        counter.clear();
    }

    /**
     * Test that the constructor sets up the seed correctly.
     */
    @Test
    public void testConstructor() {
        final long seed = 1234L;
        RandomString random1 = new RandomString(seed);
        RandomString random2 = new RandomString(seed);
        for (int i = 0; i < NUM_TESTS; i++) {
            assertEquals(random1.nextInt(), random2.nextInt());
        }
    }

    /**
     * Test getting a byte.
     */
    @Test
    public void testNextByte() {
        final int numTests = NUM_TESTS;
        for (int i = 0; i < numTests; i++) {
            byte b = random.nextByte();
            counter.increment(Byte.valueOf(b));
        }

        // bytes are 8 bits so there should be 2^8 = 256 keys
        // but half are negative and we only use the non-negative values [0, 127]
        final int holeCount = 128;
        final int expectedMin = getMinCount(numTests, holeCount);
        final int expectedMax = getMaxCount(numTests, holeCount);
        for (int i = 0; i < holeCount; i++) {
            byte b = (byte)i; // count with an int to avoid overflow, then cast here
            NumberAssert.assertBetween(expectedMin, counter.count(b), expectedMax);
        }
    }

    /**
     * Test getting a letter.
     */
    @Test
    public void testNextLetter() {
        final int numTests = NUM_TESTS;
        for (int i = 0; i < numTests; i++) {
            char c = random.nextLetter();
            counter.increment(Character.valueOf(c));
        }

        // nextChar generates a-z and A-Z so 52 possible values
        final int holeCount = 52;
        final int expectedMin = getMinCount(numTests, holeCount);
        final int expectedMax = getMaxCount(numTests, holeCount);
        for (int i = 0; i < 26; i++) {
            char lowerChar = (char)('a' + i);
            NumberAssert.assertBetween(expectedMin, counter.count(lowerChar), expectedMax);

            char upperChar = (char)('A' + i);
            NumberAssert.assertBetween(expectedMin, counter.count(upperChar), expectedMax);
        }
    }

    /**
     * How many keys are expected given the max possible values?
     * @param numTests the number of tests run
     * @param holeCount number of holes for pigeons
     * @return expectedMin
     */
    private static int getMinCount(int numTests, int holeCount) {
        int expectedCount = numTests / holeCount;
        return (int)((1 - VARIANCE_FACTOR) * expectedCount);
    }

    /**
     * How many keys are expected given the max possible values?
     * @param numTests the number of tests run
     * @param holeCount number of holes for pigeons
     * @return expectedMax
     */
    private static int getMaxCount(int numTests, int holeCount) {
        int expectedCount = numTests / holeCount;
        return (int)((1 + VARIANCE_FACTOR) * expectedCount);
    }

    /**
     * Test getting a string of the default length.
     */
    @Test
    public void testNextStringDefaultLength() {
        // default is of length 8
        assertEquals(8, random.nextString().length());
    }

    /**
     * Test getting a string of a given length.
     */
    @Test
    public void testNextStringGivenLength() {
        // these are of a requested length
        final int maxLength = 100;
        for (int length = 0; length <= maxLength; length++) {
            assertEquals(length, random.nextString(length).length());
        }
    }
}
